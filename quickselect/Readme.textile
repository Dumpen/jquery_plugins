h1. jQuery: QuickSelect

The QuickSelect plugin allows you to create a text input with a list of specified options, and as you type, those options show up in a list below the input box. You can choose to have it auto-fill the top result into the input box as you type, or select an option using the arrow keys.

There are a few special powers of this plugin:
# QuickSilver selection mode: As you type, it will use quicksilver ranking mode, and the top result will automatically be selected when you exit the field.
# Select/Options transformation: If you run .quickselect() on a select element, the data from the options will be stored and the select will be turned into an input box of the same id and className(s), and a hidden input of the same name. That way, instead of using a select, the user can simply type what they want and choose from the list. Just render your HTML page with a select and options, and run this plugin to turn it into a quickselect.
# Multiple-field update: Send a jquery object containing multiple input elements, and include a corresponding number of values in the results data, and each input element will be updated with its corresponding value from the data when an item is selected from the drop-down list.

h4. Installation

# Include the jquery library in your project.
# Then you'll need the following files for this plugin:
#* "quicksilver.js":http://github.com/dcparker/jquery_plugins/tree/master%2Fquickselect%2Fquicksilver.js?raw=true
#* "jquery.quickselect.js":http://github.com/dcparker/jquery_plugins/tree/master%2Fquickselect%2Fjquery.quickselect.js?raw=true
#* "jquery.quickselect.css":http://github.com/dcparker/jquery_plugins/tree/master%2Fquickselect%2Fjquery.quickselect.css?raw=true

h4. Usage

There are several modes in which you can use this plugin...

The simplest may be just transforming a select/options group into a text input with drop-down. $('select').quickselect(); will do the trick. Running this on a select element will use default options that work best for this type of quickselect control.

The next mode you might use is ajax. $('input#city_name_field').quickselect({url:'/ajax/cities.json'}); should do the trick.

Try this mode to make a richer application. Same as the ajax, but include more fields in your json data: $('input#city_name_field').quickselect({url:'/ajax/cities.json', additional_fields:$('input#zipcode_field')}); In your json data, instead of just spitting out an array of city names, make each array element be a two-element array, the first element being the city name (for the field you're typing in), and the second being the corresponding zip code for that city. That way when you select a city, it'll automatically populate the zipcode too! This also works really well for when you need to select a human-readable label but have the actual value be a resource id. Just make a visible text input into a quickselect but in your additional_fields mention a hidden field, and in your data just include the label and the id.

Note, if you include quicksilver.js, quickselect will automatically default to using quicksilver-like similarity matching.
* Sample 3-option json data: [['Jonstown', 22781], ['Hilariton', 91287], ['Chicago', 60610]]

h4. Options

* url: if you want to load data via ajax, include a url. The query text will be appended as ?q=$value.
* data: include data here if you aren't using ajax.
* minChars: the minimum number of characters before triggering the drop-down (and ajax, if applicable).
* delay: milliseconds after typing that the results are re-evaluated. Make this longer if your ajax is bogging down.
* matchCase: specify that the drop-down should be case-sensitive.
* match: 'substring' for exact match-as-you-type, 'quicksilver' for similarity matching. Auto-detects whether quicksilver.js is included and active, and defaults to quicksilver mode if it can.
* matchContains: use with 'substring' only, means that what you type can match anywhere in the choice item, not just the beginning.
* mustMatch: if you're not using any auto-select option, use this if you absolutely need the typed value to end up matching one of the list items in the end. If something is typed but no match is found, the text field and all fields specified in additional_fields instantly get blank values.
* extraParams: extra parameters for the ajax url.
* autoSelectFirst: keep the first item selected as you type, and tab or enter will automatically fill in the rest from the top item.
* selectOnly: use if not using autoSelectFirst, use this to make the control automatically select the top item if there is only one item left.
* maxItemsToShow: only show up to x number of items.
* additional_fields: (a jquery object with one or more elements) more fields to update with the extra data. Not honored when converting a select/option group to a quickselect control. For example, you may want to provide quickselect on a zipcode field, but when selected, update the city and state field automatically with the results.
* autoFill: use this if you want the text input to automatically try to finish what you're typing as you type, based on the top entry. This only works well if your settings make the top listing exactly match what you're typing.
* width: set the width of the drop-down list.
* formatItem: assign a function to use for formatting the list items. The function is called with arguments: data, index, total.
* inputClass: css class for styling the text input
* loadingClass: an extra css class for styling the text input while loading
* resultsClass: css class for styling the drop-down list
* selectedClass: css class for styling the currently-selected item in the drop-down list

h4. Credit

"http://www.pengoworks.com/workshop/jquery/autocomplete.htm":http://www.pengoworks.com/workshop/jquery/autocomplete.htm - original starting point

Thank you to "Sabretech":http://www.sabretechllc.com/ and "Argent":http://www.argenttitleresearch.com/ for commissioning this project!
